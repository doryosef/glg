/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 113);
/******/ })
/************************************************************************/
/******/ ({

/***/ 113:
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _react = __webpack_require__(6);

var _react2 = _interopRequireDefault(_react);

var _reactDom = __webpack_require__(125);

var _reactRouter = __webpack_require__(211);

var _Layout = __webpack_require__(237);

var _Layout2 = _interopRequireDefault(_Layout);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function buildRoutes() {
    return _react2.default.createElement(
        _reactRouter.Router,
        { history: _reactRouter.browserHistory },
        _react2.default.createElement(_reactRouter.Route, { path: '/', component: _Layout2.default })
    );
}

(0, _reactDom.render)(buildRoutes(), document.getElementById('glg'));

/***/ }),

/***/ 125:
/***/ (function(module, exports) {

"use strict";
throw new Error("Module build failed: Error: ENOENT: no such file or directory, open 'C:\\UwAmp\\www\\glg\\client\\node_modules\\react-dom\\index.js'\n    at Error (native)");

/***/ }),

/***/ 211:
/***/ (function(module, __webpack_exports__) {

"use strict";
throw new Error("Module build failed: Error: ENOENT: no such file or directory, open 'C:\\UwAmp\\www\\glg\\client\\node_modules\\react-router\\es\\index.js'\n    at Error (native)");

/***/ }),

/***/ 237:
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = __webpack_require__(6);

var _react2 = _interopRequireDefault(_react);

var _graph = __webpack_require__(238);

var _graph2 = _interopRequireDefault(_graph);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Layout = function (_React$Component) {
    _inherits(Layout, _React$Component);

    function Layout(props) {
        _classCallCheck(this, Layout);

        var _this = _possibleConstructorReturn(this, (Layout.__proto__ || Object.getPrototypeOf(Layout)).call(this, props));

        _this.state = { viewers: null };
        return _this;
    }

    _createClass(Layout, [{
        key: "render",
        value: function render() {
            console.log(this.state);
            var graphView = _graph2.default.draw();
            return _react2.default.createElement(
                "div",
                null,
                _react2.default.createElement(
                    "div",
                    { className: "gcv-container" },
                    graphView
                )
            );
        }
    }]);

    return Layout;
}(_react2.default.Component);

exports.default = Layout;

/***/ }),

/***/ 238:
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _react = __webpack_require__(6);

var _react2 = _interopRequireDefault(_react);

var _data = __webpack_require__(239);

var _data2 = _interopRequireDefault(_data);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var BRANCH = 0;
var DATE = 1;
var MSG = 2;

var graph = {
    draw: function draw() {
        var _this = this;

        this.branches = this.init();
        var graphView = [];
        var currBranches = [];

        _data2.default.map(function (commit, i) {
            var branchIdx = Object.keys(_this.branches).indexOf(commit[BRANCH]);

            //branch ended part
            //end last branch
            if (_data2.default.length - 1 === i) {
                var branchClass = { color: _this.toHexColor(commit[BRANCH]) };
                graphView.push(_react2.default.createElement(
                    "div",
                    { key: Math.random() },
                    _react2.default.createElement(
                        "span",
                        { style: branchClass },
                        "* "
                    ),
                    " ",
                    commit[DATE],
                    " | ",
                    commit[MSG]
                ));
                return;
            }
            //end and merge current branch
            Object.keys(_this.branches).map(function (bName) {
                if (_this.branches[bName] === i) {
                    (function () {
                        var horLine = [];
                        var horLine2 = [];
                        var isAfterBranchEnd = false;
                        currBranches.map(function (cb, j) {
                            var b = commit[BRANCH].split(/</);
                            var branchClass = { color: _this.toHexColor(cb) };
                            if (cb === b[1]) {
                                isAfterBranchEnd = true;
                                horLine.push(_react2.default.createElement(
                                    "span",
                                    { key: Math.random(), style: branchClass },
                                    "\\ "
                                ));
                                horLine2.splice(horLine2.length - 1, 1, _react2.default.createElement(
                                    "span",
                                    { key: Math.random(), style: branchClass },
                                    "* "
                                ));
                            } else {
                                horLine.push(_react2.default.createElement(
                                    "span",
                                    { key: Math.random(), style: branchClass },
                                    isAfterBranchEnd ? "\\ " : "| "
                                ));
                                horLine2.push(_react2.default.createElement(
                                    "span",
                                    { key: Math.random(), style: branchClass },
                                    isAfterBranchEnd ? "| " : "\\ "
                                ));
                            }
                        });
                        graphView.push(_react2.default.createElement(
                            "div",
                            { key: Math.random() },
                            horLine
                        ));
                        graphView.push(_react2.default.createElement(
                            "div",
                            { key: Math.random() },
                            horLine2,
                            " ",
                            commit[DATE],
                            " | ",
                            commit[MSG]
                        ));
                        currBranches.splice(currBranches.indexOf(bName), 1);
                    })();
                }
            });

            //master start
            if (i === 0) {
                currBranches.push(commit[BRANCH]);
                var _branchClass = { color: _this.toHexColor(commit[BRANCH]) };
                graphView.push(_react2.default.createElement(
                    "div",
                    { key: Math.random() },
                    _react2.default.createElement(
                        "sapn",
                        { style: _branchClass },
                        "* "
                    ),
                    " ",
                    commit[DATE],
                    " | ",
                    commit[MSG]
                ));
            }
            //creating branch
            else if (commit[BRANCH].includes(">")) {
                    (function () {
                        var b = commit[BRANCH].split(/>/);
                        currBranches.push(b[1]);

                        var horLine = [];
                        var horLine2 = [];
                        currBranches.map(function (cb, j) {
                            var branchClass = { color: _this.toHexColor(cb) };
                            horLine.push(_react2.default.createElement(
                                "span",
                                { key: Math.random(), style: branchClass },
                                " ",
                                cb === b[1] ? "/ " : "| "
                            ));
                            horLine2.push(_react2.default.createElement(
                                "span",
                                { key: Math.random(), style: branchClass },
                                cb === b[1] ? "*  " : "| "
                            ));
                        });
                        graphView.push(_react2.default.createElement(
                            "div",
                            { key: Math.random() },
                            horLine
                        ));
                        graphView.push(_react2.default.createElement(
                            "div",
                            { key: Math.random() },
                            horLine2,
                            " ",
                            commit[DATE],
                            " | ",
                            commit[MSG]
                        ));
                    })();
                }
                //merging back
                else if (commit[BRANCH].includes("<")) {
                        var b = commit[BRANCH].split(/</);
                    }
                    //new branch
                    else if (branchIdx === -1) {
                            currBranches.push(commit[BRANCH]);
                            graphView.push(_react2.default.createElement(
                                "div",
                                { key: Math.random() },
                                "|/ ",
                                commit[DATE],
                                " | ",
                                commit[MSG]
                            ));
                        }
                        //commit
                        else {
                                (function () {
                                    var horLine = [];
                                    currBranches.map(function (cb, j) {
                                        var branchClass = { color: _this.toHexColor(cb) };
                                        horLine.push(_react2.default.createElement(
                                            "span",
                                            { key: cb + "_" + i + "_" + j, style: branchClass },
                                            cb === commit[BRANCH] ? "* " : "| "
                                        ));
                                        //horLine = cb === commit[BRANCH] ? horLine + "* " : horLine + "| ";
                                    });
                                    graphView.push(_react2.default.createElement(
                                        "div",
                                        { key: Math.random() },
                                        horLine,
                                        " ",
                                        commit[DATE],
                                        " | ",
                                        commit[MSG]
                                    ));
                                })();
                            }
        });
        return graphView.reverse();
    },
    init: function init() {
        var _this2 = this;

        this.branches = {};

        //getting branches exist and when ended
        _data2.default.map(function (commit, i) {
            var branchIdx = Object.keys(_this2.branches).indexOf(commit[BRANCH]);
            if (commit[BRANCH].includes("<") || commit[BRANCH].includes(">")) {
                var b = commit[BRANCH].split(/>|</);
                _this2.branches[b[0]] = i;
                _this2.branches[b[1]] = i;
            } else if (branchIdx === -1) {
                Object.assign(_this2.branches, _defineProperty({}, commit[BRANCH], i));
            } else {
                _this2.branches[commit[BRANCH]] = i;
            }
        });
        return this.branches;
    },


    /* credit for solution converting string to rgb hex code
     * designedbyaturtle.co.uk/2014/convert-string-to-hexidecimal-colour-with-javascript-vanilla
     */
    toHexColor: function toHexColor(str) {
        return "#" + this.intToARGB(this.hashCode(str));
    },
    hashCode: function hashCode(str) {
        var hash = 0;
        for (var i = 0; i < str.length; i++) {
            hash = str.charCodeAt(i) + ((hash << 5) - hash);
        }
        return hash;
    },
    intToARGB: function intToARGB(i) {
        var hex = (i >> 24 & 0xFF).toString(16) + (i >> 16 & 0xFF).toString(16) + (i >> 8 & 0xFF).toString(16) + (i & 0xFF).toString(16);
        hex += '000000';
        return hex.substring(0, 6);
    }
};
exports.default = graph;

/***/ }),

/***/ 239:
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});
// commit msg credit go to: whatthecommit   :)
var data = [["master", "bb35615 01-01-2018", "init project"], ["master", "7e6843b 01-02-2018", "I should have had a V8 this morning."], ["master", "c342f2f 01-04-2018", "I will not apologize for art."], ["master>new-feature", "87ee6bf 01-05-2018", "Update .gitignore"], ["master<new-feature", "1a8501f 01-05-2018", "merged"], ["master", "2eab2b6 01-06-2018", "Stuff"], ["master>sub-system", "2eab2b6 01-07-2018", "Test commit. Please ignore"], ["sub-system", "158b65a 01-06-2018", "Fixed a bug cause Jason said to"], ["master>ateam", "ce6d865 01-06-2018", "Herping the derp"], ["master<sub-system", "09eef0d 01-07-2018", "."], ["master<ateam", "856c6c2 01-07-2018", "Working on tests (haha)"], ["master", "d93e386 01-010-2018", "sync"]];
exports.default = data;

/***/ }),

/***/ 6:
/***/ (function(module, exports) {

"use strict";
throw new Error("Module build failed: Error: ENOENT: no such file or directory, open 'C:\\UwAmp\\www\\glg\\client\\node_modules\\react\\react.js'\n    at Error (native)");

/***/ })

/******/ });
//# sourceMappingURL=data:application/json;charset=utf-8;base64,